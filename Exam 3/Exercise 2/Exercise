Дадена е правоъгълна матрица от символи matrix с максимална размерност 100 x 100. 
Съседни клетки на матрицата се наричат всички клетки, които имат обща стена (по хоризонтала или вертикала). 
Казваме, че дума се прочита в матрица, ако буквите ѝ се съдържат в матрицата в съседни клетки. 
В матрицата има и непроходими клетки, които се отбелязват със знака ‘#’. 1.1)(1.1 т.) 
Да се напише рекурсивна функция findWord( [подходящ тип] matrix, char * word, [други параметри, ако са нужни]), която по матрица и дума връща дали думата се среща в матрицата.
Ако думата се среща в матрицата, символите ѝ да се заменят от знака ‘#’. 1.2)(0.4 т.) Да се напише програма, която демонстрира начина на работа на findWord. 
Програмата трябва да въвежда от клавиатурата стойност за N и М - действителните размери на матрицата, елементите на матрицата и дума с максимална дължина 100 символа. 
Да се използва коректен тип и да се направи валидация за горната граница на N и М. Ако стойността за N или M е невалидна, да се хвърли грешка (изключение). 1.3)(0.5 т.)
Да се напише функция findAll, която приема масив от максимум 50 низа с произволна, въведена от клавиатурата дължина, и връща дали всички думи могат да се прочетат в матрицата.
Всеки символ от матрицата може да участва точно в една дума. 
Да се допълни програмата от 1.2 и да се демонстрира въвеждането на данните за броя на низовете, техните дължини и стойности и работата на реализираната функция. 
Да се приеме, че за броя на низовете и техните дължини се въвеждат валидни неотрицателни стойности. 
Да се приеме, че всяка дума може да се прочете най-много веднъж в матрицата и се състои от малки латински букви. 

Бонус(0.75): Да се реши 1.3, ако е възможно дума да се прочете на повече от едно място. Пример: Списък с думи, които се срещат в матрицата - mother, food, dad, me, top
